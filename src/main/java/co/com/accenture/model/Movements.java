package co.com.accenture.model;

import java.math.BigDecimal;
import java.util.Map;

import javax.validation.constraints.Min;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedTimestamp;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConvertedTimestamp;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

@DynamoDBTable(tableName = "Movimientos")
public class Movements {
	@DynamoDBHashKey(attributeName = "IdMovimiento")
	@DynamoDBAutoGeneratedKey
	private String id;

	@DynamoDBAttribute(attributeName = "Producto")
	@NotBlank(message = "No puede estar vacio")
	@NotEmpty(message = "Este campo es obligatorio")
	private String product;

	@DynamoDBAttribute(attributeName = "ValorTransaccion")
	@NotNull(message = "No puede ser nulo")
	@Min(message="El valor ingresado debe ser mayor de 1.000",value=1001)
	private BigDecimal value;

	@DynamoDBAttribute(attributeName = "TipoId")
	@NotBlank(message = "No puede estar vacio")
	@NotEmpty(message = "Este campo es obligatorio")
	private String typeId;

	@DynamoDBAttribute(attributeName = "IdCliente")
	@NotBlank(message = "No puede estar vacio")
	@NotEmpty(message = "Este campo es obligatorio")
	private String idClient;

	@DynamoDBAutoGeneratedTimestamp
	@DynamoDBTypeConvertedTimestamp(pattern = "HH:mm:ss.SSS", timeZone = "GMT-5")
	@DynamoDBAttribute(attributeName = "Hora")
	private String time;

	@DynamoDBAutoGeneratedTimestamp
	@DynamoDBTypeConvertedTimestamp(pattern = "yyyy-MM-dd", timeZone = "GMT-5")
	@DynamoDBIndexHashKey(globalSecondaryIndexName = "Fecha-index")
	@DynamoDBAttribute(attributeName = "Fecha")
	private String date;

	public Movements(Map<String, AttributeValue> item) {
		this.id = item.get("IdMovimiento") == null ? null : item.get("IdMovimiento").getS();
		this.product = item.get("Producto") == null ? null : item.get("Producto").getS();
		if (item.get("ValorTransaccion") == null)
			this.value = null;
		else
			this.value = new BigDecimal(item.get("ValorTransaccion").getN());
		this.typeId = item.get("TipoId") == null ? null : item.get("TipoId").getS();
		this.idClient = item.get("IdCliente") == null ? null : item.get("IdCliente").getS();
		this.time = item.get("Hora") == null ? null : item.get("Hora").getS();
		this.date = item.get("Fecha") == null ? null : item.get("Fecha").getS();

	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getProduct() {
		return product;
	}

	public void setProduct(String product) {
		this.product = product;
	}

	public BigDecimal getValue() {
		return value;
	}

	public void setValue(BigDecimal value) {
		this.value = value;
	}

	public String getTypeId() {
		return typeId;
	}

	public void setTypeId(String typeId) {
		this.typeId = typeId;
	}

	public String getIdClient() {
		return idClient;
	}

	public void setIdClient(String idClient) {
		this.idClient = idClient;
	}

	public String getTime() {
		return time;
	}

	public void setTime(String time) {
		this.time = time;
	}

	public String getDate() {
		return date;
	}

	public void setDate(String date) {
		this.date = date;
	}

	public Movements() {
		super();
	}
}
