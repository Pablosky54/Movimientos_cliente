/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package co.com.accenture.api;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import co.com.accenture.model.Clientes;
import co.com.accenture.model.ClientesById;
import co.com.accenture.model.Respuesta;
import co.com.accenture.model.RespuestaConsulta;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-10T10:48:28.371-05:00")
@Api(value = "log", description = "the data API")
public interface ClientesApi {

	@ApiOperation(value = "", nickname = "", notes = "")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successful operation", response = Respuesta.class),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 500, message = "Internal server error")
    })
    @RequestMapping(value = "/clientes", produces = { "application/json" }, method = RequestMethod.POST)
    ResponseEntity<Respuesta> save(@RequestBody Clientes cliente);
		

	@ApiOperation(value = "", nickname = "", notes = "")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successful operation", response = RespuestaConsulta.class),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 500, message = "Internal server error")
    })
    @RequestMapping(value = "/clientes", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<RespuestaConsulta> getAll();
	
	
	@ApiOperation(value = "", nickname = "", notes = "")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successful operation", response = Clientes.class),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 500, message = "Internal server error")
    })
    @RequestMapping(value = "/clientesById", produces = { "application/json" }, method = RequestMethod.POST)
    ResponseEntity<Clientes> postById(@RequestBody ClientesById id);



//actualizar datos 

	@ApiOperation(value = "", nickname = "", notes = "")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successful operation", response = Respuesta.class),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 500, message = "Internal server error")
    })
    @RequestMapping(value = "/clientes", produces = { "application/json" }, method = RequestMethod.PUT)
    ResponseEntity<RespuestaConsulta> update(@RequestBody Clientes clienteact);
	
	//eliminar datos
	
	@ApiOperation(value = "", nickname = "", notes = "")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successful operation", response = Respuesta.class),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 500, message = "Internal server error")
    })
    @RequestMapping(value = "/clientes", produces = { "application/json" }, method = RequestMethod.DELETE)
    ResponseEntity<RespuestaConsulta> delete(@RequestBody Clientes clientedel);
	
	
}






